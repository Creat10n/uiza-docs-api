## Update a live event

> REQUEST

```bash
curl -X PUT \
  <%= config[:endpoint] %>/live/ \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "id":"8b83886e-9cc3-4eab-9258-ebb16c0c73de",
    "name":"live test",
    "mode":"pull",
    "encode":0,
    "dvr":1
    "resourceMode":"single"
}'
```

```ruby
require "uiza"

Uiza.workspace_api_domain = "<%= config[:endpoint] %>"
Uiza.authorization = "<%= config[:token] %>"

params = {
  id: "your-live-id",
  name: "live test",
  mode: "pull",
  encode: 0,
  dvr: 1,
  resourceMode: "single"
}

begin
  live = Uiza::Live.update params
  puts live.id
  puts live.name
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
res, status_code = Live().update(id="33a86c18-f502-41a4-9c4c-d4e14efca238", name="Update title")

print("id: ", res.id)
print("status_code", status_code)
```

```php
<?php
$params = [
  "name" => "live test",
  "mode" => "pull",
  "encode" => 0,
  "dvr" => 1,
  "resourceMode" => "single"
];
Uiza\Live::update("key ..", $params);
?>
```

```java
import io.uiza.model.Live;

Uiza.apiDomain = "<%= config[:endpoint] %>";
Uiza.apiKey = "<%= config[:token] %>";

Map<String, Object> params = new HashMap<>();
params.put("name", "<your-live-event-name>");
params.put("mode", Mode.PULL.toString());
params.put("encode", Encode.ENCODE.getVal());
params.put("dvr", Dvr.ACTIVE_RECORD.getVal());
params.put("linkStream", new String[] {"stream-url1.com", "stream-url2.com"});
params.put("resourceMode", ResourceMode.SINGLE.toString());

try {
  JsonObject live = Live.update("<live-event-id>", params);
  System.out.println(live.get("id"));
} catch (UizaException e) {
  System.out.println("Status is: " + e.getStatusCode());
  System.out.println("Message is: " + e.getMessage());
  System.out.println("Description link is: " + e.getDescriptionLink());
} catch (Exception e) {

}
```

```javascript
const uiza = require('../lib/uiza')('<%= config[:endpoint] %>', '<%= config[:token] %>');

uiza.live.update({
  'id': '1b2c6899-2bca-4d60-ae78-01d1c2f5a2ab',
  'name': 'live test',
  'mode': 'pull',
  'encode': 0,
  'dvr': 1,
  'resourceMode': 'single'
}).then((res) => {
    //Identifier of event has been updated
  }).catch((err) => {
    //Error
  });
```

```go
import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/live"
)
dvrType := uiza.DvrTypeOne
resourceMode := uiza.ResourceModeSingle
params := &uiza.LiveUpdateParams{
  ID: uiza.String("5c607bc8-1063-4025-ad36-6c6516a7dd5b"),
  Name: uiza.String("Live streaming Update name"),
  Dvr: &dvrType,
  ResourceMode: &resourceMode,
}
response, _ := live.Update(params)
log.Printf("%v\n", response)
```

```csharp
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  ApiKey = "<%= config[:token] %>",
  ApiBase = "<%= config[:endpoint] %>"
});

var resultUpdate = UizaServices.Live.Update(new UpdateLiveStreamingParameter()
{
  Id = createResult.Data.id,
  Name = Guid.NewGuid().ToString(),
  Mode = "pull",
  Encode = EncodeTypes.Encode,
  Drv = DvrTypes.ActiveFeatureRecord,
  ResourceMode = ResourceModes.Single
});

Console.WriteLine(string.Format("Update Live Streaming Id = {0} Success", resultUpdate.Data.id));
```

Updates the specified live event by setting the values of the parameters passed. Any parameters not provided will be left unchanged.

> RESPONSE

```json
{
  "id": "8b83886e-9cc3-4eab-9258-ebb16c0c73de"
}
```

**HTTP Request**

<span class="put-button"> PUT </span>
```<%= config[:endpoint] %>/live/entity```

**ARGUMENTS**

| Parameter     | Description | Required |
| ------------- | ------------- | ------------- |
| **id** *string* | The identifier of the live event |**Yes**|
| **name** *string* | The event's name (limit 100 characters) |**Yes**|
| **description** *string* | An arbitrary string attached to the object. Often useful for displaying to users. | **YES** |
| **dvr** *integer* | Decides wether to record a live stream. If set to `1`, a mp4 file will be created after the live stream ended. Set `0` to disable. | **YES** |
| **mode** *string* | Type of event, allowed values [`pull`&vert;`push`]. <br />**Pull** links can either be a `RTMP` URL or a .m3u8 URL or a live youtube link <br />**Push**: Uiza will generate an end point. This end point can be used on Broadcasting softwares such as [OBS](https://obsproject.com/) to start your streaming. | **YES** |
| **encode** *integer* | Set to `1` to enable live transcoding. Live transcoding will enable [Adaptive Bitrate](https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming) on the viewer's side which would help deliver a better viewing experience. When set to `0`, viewers will watch with source bitrate. | **Yes** |
| **resourceMode** *enum* | Resource mode ( ``single`` = only 1 feed & output), ``redundant`` = more than 1 feed & output to backup)|**Yes**|


**RETURNS**

Returns the ID of the updated live event if the update succeeded.