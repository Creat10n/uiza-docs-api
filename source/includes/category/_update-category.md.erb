## Update a category


> REQUEST

```bash
curl -X PUT \
  <%= config[:endpoint] %>/media/metadata \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "id":"095778fa-7e42-45cc-8a0e-6118e540b61d",
    "name":"Folder edited",
    "type":"folder",
    "description":"Folder description new",
    "orderNumber":1,
    "icon":"http://exemple.com/icon_001.png"
}'
```

```ruby
require "uiza"

Uiza.workspace_api_domain = "<%= config[:endpoint] %>"
Uiza.authorization = "<%= config[:token] %>"

params = {
  id: "your-category-id",
  name: "Folder edited",
  type: "folder"
}

begin
  category = Uiza::Category.update params
  puts category.id
  puts category.name
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
res, status_code = Category().update(id="33a86c18-f502-41a4-9c4c-d4e14efca238", name="Update title")

print("id: ", res.id)
print("status_code", status_code)
```

```php
<?php
$params = [
  "name" => "Folder edited",
  "type" => "folder"
];

Uiza\Category::update("key ..", $params);
?>
```

```java
import io.uiza.model.Category;

Uiza.apiDomain = "<%= config[:endpoint] %>";
Uiza.apiKey = "<%= config[:token] %>";

Map<String, Object> params = new HashMap<>();
params.put("name", "Playlist Sample");
params.put("type", Type.PLAYLIST.toString());

try {
  JsonObject category = Category.update("<category-id>", params);
  System.out.println(category.get("id"));
} catch (UizaException e) {
  System.out.println("Status is: " + e.getStatusCode());
  System.out.println("Message is: " + e.getMessage());
  System.out.println("Description link is: " + e.getDescriptionLink());
} catch (Exception e) {

}
```

```javascript
uiza.category.update({
  'id': 'c0d3e5f2-9ae7-4e46-94a2-29612d562db0',
  'name': 'Folder sample 312',
  'type': 'folder',
  'orderNumber': 1,
  'description': 'Folder description',
  'icon': 'https://exemple.com/icon.png'
}).then((res) => {
    //Identifier of category has been updated
  }).catch((err) => {
    //Error
  });
```

```go
import (
  "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/category"
)

var typeCategory = uiza.CategoryFolderType
params := &uiza.CategoryUpdateParams{
  ID: uiza.String("Your category ID"),
  Name: uiza.String(""),
  Type: &typeCategory,
  Description:uiza.String(""),
  Icon:uiza.String(""),
  OrderNumber:uiza.Int64(2),
}

response, _ := category.Update(params)
log.Printf("%v", response)
```

```csharp
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  ApiKey = "<%= config[:token] %>",
  ApiBase = "<%= config[:endpoint] %>"
});

var resultUpdate = UizaServices.Category.Update(new UpdateCategoryParameter()
{
  Id = createResult.Data.id,
  Name = string.Format("Category name {0}", Guid.NewGuid().ToString()),
  Type = CategoryTypes.PlayList
});

Console.WriteLine(string.Format("Update Category Id = {0} Success", resultUpdate.Data.id));
```

Updates the specified category by setting the values of the parameters passed. Any parameters not provided will be left unchanged.

> RESPONSE

```json
{
  "id": "095778fa-7e42-45cc-8a0e-6118e540b61d"
}
```

**HTTP Request**

<span class="put-button"> PUT </span>
```<%= config[:endpoint] %>/media/metadata```

**ARGUMENTS**

| Parameter  | Description | Required |
| -------------  | ------------- | ------------- |
| **id** *string* | Identifier of category | **Yes** |
| **name** *string* | The category’s name, meant to be displayable to end users. | **Yes** |
| **type** *enum* | Allowed values [ **folder**&vert;**playlist**&vert;**tag** ]. | **Yes** |
| **description** *string* | The category’s description, meant to be displayable to end users. |  |
| **orderNumber** *integer* | The category's display order, categories with smaller number will be displayed first. |  |
| **icon** *string* | The URL to the category's icon. |  |


**RETURNS**

Returns the ID of the updated category if the update succeeded.