## Update a callback

> REQUEST

```shell
curl -X PUT \
  <%= config[:endpoint] %>/media/entity/callback \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "appId": "<%= config[:app_id] %>",
    "id": "<%= config[:callback_update_id] %>",
    "url": "<%= config[:callback_update_url] %>",
    "method": "<%= config[:callback_update_method] %>",
    "jsonData": {
      "data": "<%= config[:callback_update_json_data] %>"
    },
    "headersData": {
      "data": "<%= config[:callback_update_headers_data] %>"
    }
}'
```

```ruby
require "uiza"

Uiza.app_id = "<%= config[:app_id] %>"
Uiza.authorization = "<%= config[:token] %>"

params = {
  id: "<%= config[:callback_update_id] %>",
  url: "<%= config[:callback_update_url] %>",
  method: "<%= config[:callback_update_method] %>",
  jsonData: {
    data: "<%= config[:callback_update_json_data] %>"
  },
  headersData: {
    data: "<%= config[:callback_update_headers_data] %>"
  }
}

begin
  callback = Uiza::Callback.update params
  puts callback.id
  puts callback.url
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
import uiza

from uiza.api_resources.category import Callback
from uiza.exceptions import ServerException

uiza.app_id = "<%= config[:app_id] %>"
uiza.authorization = "<%= config[:token] %>"

callback_data = {
  "id": "<%= config[:callback_update_id] %>",
  "url": "<%= config[:callback_update_url] %>",
  "method": "<%= config[:callback_update_method] %>",
  "jsonData": {
    "data": "<%= config[:callback_update_json_data] %>"
  },
  "headersData": {
    "data": "<%= config[:callback_update_headers_data] %>"
  }
}

try:
  res, status_code = Callback().update(**callback_data)

  print("res: ", res)
except ServerException as e:
  raise e
except Exception as e:
  raise e
```

```php
<?php
require __DIR__."/../vendor/autoload.php";

Uiza\Base::setWorkspaceApiDomain("your-workspace-api-domain.uiza.co");
Uiza\Base::setAuthorization("your-authorization");

$params = [
  "url" => "https://callback-url.uiza.co",
  "method" => "POST"
];

try {
  Uiza\Callback::update("your-callback-id", $params);
} catch(\Uiza\Exception\ErrorResponse $e) {
  print($e);
}
?>
```

```java
import java.util.*;
import com.google.gson.*;

import io.uiza.Uiza;
import io.uiza.exception.*;
import io.uiza.model.Callback;
import io.uiza.model.Callback.*;

public class Main {

  public static void main(String[] args) {
    Uiza.workspaceApiDomain = "your-workspace-api-domain.uiza.co";
    Uiza.authorization = "your-authorization";

    Map<String, Object> params = new HashMap<>();
    params.put("url", "<your-server-callback>");
    params.put("method", Method.POST);

    try {
      JsonObject response = Callback.update("<callback-id>", params);
      System.out.println(response);
    } catch (UizaException e) {
      System.out.println("Status is: " + e.getStatusCode());
      System.out.println("Message is: " + e.getMessage());
      System.out.println("Description link is: " + e.getDescriptionLink());
    } catch (Exception e) {
      System.out.println(e);
    }
  }
}
```

```javascript
const uiza = require('uiza');
uiza.workspace_api_domain('your-workspace-api-domain.uiza.co');
uiza.authorization('your-authorization-key');

const params = {
  'id': 'your-callback-id',
  'url': 'https://callback-url.uiza.co',
  'method': 'GET'
};

uiza.callback.update(params)
  .then((res) => {
    //Identifier of callback has been updated
  }).catch((err) => {
    //Error
  });
```

```go
import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/callback"
)

func init() {
  Uiza.WorkspaceAPIDomain = "your-workspace-api-domain.uiza.co"
  Uiza.Authorization = "your-authorization"
}

callbackMethodPOST := uiza.HTTPMethodPost
params := &uiza.CallbackUpdateParams{
	ID:    uiza.String("your-callback-id"),
	Url:    uiza.String("https://callback-url.uiza.commm"),
	Method: &callbackMethodPOST,
}

response, err := callback.Update(params)
if err != nil {
  log.Printf("%v\n", err)
} else {
  log.Printf("%v\n", response)
}
```

```csharp
using System;
using Uiza.Net.Configuration;
using Uiza.Net.Enums;
using Uiza.Net.Parameters;
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  WorkspaceApiDomain = "your-workspace-api-domain.uiza.co",
  Authorization = "your-authorization"
});

try
{
  var result = UizaServices.Callback.Update(new UpdateCallbackParameter()
  {
    Id = "your-callback-id",
    Url = "https://callback-url.uiza.co/update",
    Method = CallbackMethodTypes.Post
  });

  Console.WriteLine(string.Format("Update Callback Id = {0} Success", result.Data.id));
  Console.ReadLine();
}
catch (UizaException ex)
{
  Console.WriteLine(ex.Message);
  Console.ReadLine();
}
```

Updates the specified callback by setting the values of the parameters passed. Any parameters not provided will be left unchanged.

> RESPONSE

```json
{
  "id": "<%= config[:callback_update_id] %>"
}
```

**HTTP Request**

<span class="put-button"> PUT </span>
```<%= config[:endpoint] %>/media/entity/callback```

**ARGUMENTS**

| Parameter  | Description | Required |
| ------------- | ------------- | ------------- |
| **id** *string* | The ID of the callback | **Yes** |
| **url** *string* | The callback URL. |  |
| **method** *enum* | The HTTP method of callback. Should only be `POST` or `GET` | |
| **jsonData** *object* | Extra data you want to attach when callback is called. |  |
| **headersData** *object* | The headers you want the callback to attach. |  |


**RETURNS**

Returns the ID of the updated callback if the update succeeded.
