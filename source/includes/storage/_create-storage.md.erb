## Add a storage

Uiza allows you to add storages (FTP, S3 - both private and AWS) to your application. Storages can be used for [creating entities](#create-entity).

> **Add a FTP Storage**

> REQUEST

```bash
curl -X POST \
  <%= config[:endpoint] %>/media/storage \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "name": "FTP Uiza",
    "description": "FTP of Uiza, use for transcode",
    "storageType": "ftp",
    "host": "ftp-example.uiza.io",
    "username": "uiza",
    "password": "=59x@LPsd+w7qW",
    "port": 21
}'
```

> **Add a S3 Storage**

```bash
curl -X POST \
  <%= config[:endpoint] %>/media/storage \
  -H 'Authorization: <%= config[:token] %>' \
  -H 'Content-Type: application/json' \
  -d '{
    "name": "FTP Uiza",
    "description": "FTP of Uiza, use for transcode",
    "storageType": "ftp",
    "host": "ftp-example.uiza.io",
    "username": "uiza",
    "password": "=59x@LPsd+w7qW",
    "port": 21
}'
```

```ruby
require "uiza"

Uiza.workspace_api_domain = "<%= config[:endpoint] %>"
Uiza.authorization = "<%= config[:token] %>"

params = {
  name: "FTP Uiza",
  description: "FTP of Uiza, use for transcode",
  storageType: "ftp",
  host: "ftp-example.uiza.io"
}

begin
  storage = Uiza::Storage.add params
  puts storage.id
  puts storage.name
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
from uiza.api_resources.storage import Storage

storage_data = {
  "name":"FTP Uiza Test",
  "description":"FTP of Uiza, use for transcode",
  "storageType":"ftp",
  "host":"ftp-example.uiza.io"
}

res, status_code = Storage().add(**storage_data)

print("id: ", res.id)
print("status_code", status_code)
```

```php
<?php
$params = [
  "name" => "FTP Uiza",
  "description" => "FTP of Uiza, use for transcode",
  "storageType" => "ftp",
  "host" => "ftp-example.uiza.io",
  "username" => "uiza",
  "password" => "=59x@LPsd+w7qW",
  "port" => 21
];

Uiza\Storage::add($params);
?>
```

```java
import io.uiza.model.Storage;

Uiza.apiDomain = "<%= config[:endpoint] %>";
Uiza.apiKey = "<%= config[:token] %>";

Map<String, Object> params = new HashMap<>();
params.put("name", "FTP Uiza");
params.put("host", "ftp-example.uiza.io");
params.put("port", "21");
params.put("type", StorageType.FTP.toString());

try {
  JsonObject storage = Storage.add(params);
  System.out.println(storage.get("name"));
} catch (UizaException e) {
  System.out.println("Status is: " + e.getStatusCode());
  System.out.println("Message is: " + e.getMessage());
  System.out.println("Description link is: " + e.getDescriptionLink());
} catch (Exception e) {

}
```

```javascript
uiza.storage.add({
  'name': 'axon',
  'description': 'axon of Uiza, use for transcode',
  'storageType': 'ftp',
  'host': 'axon-example.uiza.io',
  'username': 'uiza',
  'password': '=59x@LPsd+w7qW',
  'port': 21
}).then((res) => {
  //Identifier of storage has been add
}).catch((err) => {
  //Error
});
```

```go
import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/storage"
)

params :=  &uiza.StorageAddParams{
  Name: uiza.String("FTP Uiza"),
  Host: uiza.String("ftp-example.uiza.io"),
  Port: uiza.Int64(21),
  StorageType: uiza.String("ftp"),
  Username: uiza.String("uiza"),
  Password: uiza.String("=59x@LPsd+w7qW"),
  Description: uiza.String("FTP of Uiza, use for transcode"),
}

response, _ := storage.Add(params)
log.Printf("%v\n", response)
```

```csharp
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  ApiKey = "<%= config[:token] %>",
  ApiBase = "<%= config[:endpoint] %>"
});

var createResult = UizaServices.Storage.Add(new AddStorageParameter()
{
  Name = "FTP Uiza",
  Host = "ftp-example.uiza.io",
  Description = "FTP of Uiza, use for transcode",
  StorageType = StorageInputTypes.Ftp,
  UserName = "uiza",
  Password = "=59x@LPsd+w7qW",
  Port = 21
});
Console.WriteLine(string.Format("Add New Storage Id = {0} Success", createResult.Data.id));
```

> RESPONSE

```json
{
  "id": "cd003123-7ec9-4f3a-9d7c-f2de93e83e49"
}
```

**HTTP Request**

<span class="post-button"> POST </span>
```<%= config[:endpoint] %>/media/storage```

**ARGUMENTS**

### FTP storage

| Parameter  | Description | Required |
|-------------|-------------|---------|
| **name** *string* | Storage's name. Used for references. | **Yes** |
| **host** *string* | Host name or IP Address of the FTP server. | **Yes** |
| **port** *int* | FTP Port. | **Yes** |
| **type** *string* | Must be set to `ftp` for this storage type. | **Yes** |
| **username** *string* | FTP username |  |
| **password** *string* | FTP password |  |
| **description** *string* | Storage's description |  |

### S3 storage

| Parameter   | Description | Required |
|-------------|-------------|---------|
| **name** *string* | Name of the storage| **Yes** |
| **host** *string* | Host name or IP Address of the S3 server. | **Yes** |
| **port** *int* | S3's port. Usually it's 443.  | **Yes** |
| **type** *string* | Must be set to `s3` for this storage type. | **Yes** |
| **awsAccessKey** *string* | AWS Access key ID. |  |
| **awsSecretKey** *string* | AWS Secret key ID. |  |
| **prefix** *string* | Prefix for objects store in this S3. |  |
| **bucket** *string* | Bucket data of S3. |  |
| **region** *string* | Storage's region, applicable for AWS S3. |  |
| **description** *string* | Storage's description |  |

**RETURNS**

Returns a storage identifier if the call succeeded.