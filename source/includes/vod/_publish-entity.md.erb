## Publish entity to CDN


> REQUEST

```bash
curl -X POST \
  <%= config[:endpoint] %>/media/entity/publish?id=<%= config[:uiza_entity_id] %> \
  -H 'Authorization: <%= config[:token] %>'
```

```ruby
require "uiza"

Uiza.workspace_api_domain = "<%= config[:endpoint] %>"
Uiza.authorization = "<%= config[:token] %>"

begin
  response = Uiza::Entity.publish "your-entity-id"
  puts response.message
  puts response.entityId
rescue Uiza::Error::UizaError => e
  puts "description_link: #{e.description_link}"
  puts "code: #{e.code}"
  puts "message: #{e.message}"
rescue StandardError => e
  puts "message: #{e.message}"
end
```

```python
res, status_code = Entity().publish("ddf09dd0-b7a8-4f29-92df-14dafb97b2aa")

print("id: ", res.id)
print("status_code", status_code)
```

```php
<?php
$entity = Uiza\Entity::publish(["id" => "key .."]);
?>
```

```java
import io.uiza.model.Entity;

Uiza.apiDomain = "<%= config[:endpoint] %>";
Uiza.apiKey = "<%= config[:token] %>";

try {
  JsonObject response = Entity.publish("<entity-id>");
  System.out.println(response.get("message"));
} catch (UizaException e) {
  System.out.println("Status is: " + e.getStatusCode());
  System.out.println("Message is: " + e.getMessage());
  System.out.println("Description link is: " + e.getDescriptionLink());
} catch (Exception e) {

}
```

```javascript
uiza.entity.publish({
  'id': '1a6600c0-6ecd-4ca9-9ee1-3125e7c9d9f8',
}).then((res) => {
  // Identifier of task publish
}).catch((err) => {
  //Error
});
```

```go
import (
  uiza "github.com/uizaio/api-wrapper-go"
  "github.com/uizaio/api-wrapper-go/entity"
)

params := &uiza.EntityPublishParams{ID: uiza.String("Your entity ID")}
response, _ := entity.Publish(params)
log.Printf("%v\n", response)
```

```csharp
using Uiza.Net.Services;

UizaConfiguration.SetupUiza(new UizaConfigOptions
{
  ApiKey = "<%= config[:token] %>",
  ApiBase = "<%= config[:endpoint] %>"
});

var result = UizaServices.Entity.Publish("Entity Id");
Console.WriteLine(string.Format("Publish Entity Success : entityId = {0} ", result.Data.entityId));
```

All entities need to be [published](#publish-entity-to-cdn) before the public can access. Unpublished videos can still be [edited](#update-an-entity), [listed](#list-entities) by `API` or using `Dashboard` but [Player](#Player) will not play. 

```If you use Uiza's `Quick Start` on App's dashboard it will get published automatically.```

> RESPONSE

```json
{
  "id": "<%= config[:uiza_entity_id] %>",
  "message": "Your entity started publish, check process status with this entity ID",
  "entityId": "42ceb1ab-18ef-4f2e-b076-14299756d182"
}
```

**HTTP Request**

<span class="post-button"> POST </span>
```<%= config[:endpoint] %>/media/entity/publish```

**ARGUMENTS**

| Parameter Type | Description | Required |
| -------------- | ----------- | ------------- |
| **id** *string* | Identifier of entity | **Yes** |


**RETURNS**

Return an identifier of the publishing request. Use `id` to [retrieve publishing status](#get-publish-status). The publishing process should take a few minutes to complete, varies by video's size and length.

| Attribute   | Description |
|-------------|-------------------------|
| **id** *string* | The identifier of the publishing request |
| **message** *string* | Detail message of the publishing request |
| **entityId** *string* | The identifier of entity |
